// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using chrsolr_api.Data;

#nullable disable

namespace chrsolr_api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231017174059_seed-jobs")]
    partial class seedjobs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e4833bb1-abeb-4596-a4e8-ebac6bf9d6bd"),
                            Description = "9 Week .NET Full Stack Program, 8/2014",
                            Location = "Coder Camps, Pearland, TX",
                            Order = 1,
                            UserId = new Guid("7ca4b089-8feb-4017-857a-b0129948a0c8")
                        },
                        new
                        {
                            Id = new Guid("74577ea6-d113-4ab6-b653-f866e4dde059"),
                            Description = "Bachelor's Degree in Computer Science, (78 Credits)",
                            Location = "Rhode Island College, Providence, RI",
                            Order = 2,
                            UserId = new Guid("7ca4b089-8feb-4017-857a-b0129948a0c8")
                        },
                        new
                        {
                            Id = new Guid("8174eb84-3734-4252-932e-31622c4569d3"),
                            Description = "Associate Degree in Applied Science in Information Technology, 08/2011",
                            Location = "Monroe College, Bronx, NY",
                            Order = 3,
                            UserId = new Guid("7ca4b089-8feb-4017-857a-b0129948a0c8")
                        });
                });

            modelBuilder.Entity("Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d91a8535-c3e8-4509-bb52-6cb54b9900c7"),
                            CompanyName = "Innowatts Inc",
                            EndDate = "Present",
                            StartDate = "February 2018",
                            Title = "Full Stack Developer",
                            UserId = new Guid("7ca4b089-8feb-4017-857a-b0129948a0c8")
                        },
                        new
                        {
                            Id = new Guid("5d83f458-2144-4ae3-8bd3-78e71dc4c960"),
                            CompanyName = "Preventice Solutions",
                            EndDate = "June 2017",
                            StartDate = "August 2015",
                            Title = "Jr. Software Engineer",
                            UserId = new Guid("7ca4b089-8feb-4017-857a-b0129948a0c8")
                        },
                        new
                        {
                            Id = new Guid("089464e4-1a7c-4bdc-ae0c-09f4f6bdc4fa"),
                            CompanyName = "Coder Camps",
                            EndDate = "March 2015",
                            StartDate = "September 2014",
                            Title = "Jr. Web Developer/Teacher Assistants",
                            UserId = new Guid("7ca4b089-8feb-4017-857a-b0129948a0c8")
                        });
                });

            modelBuilder.Entity("Responsibility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Responsibilities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3bf2167f-a66b-4ca9-94ec-04e9695ae76e"),
                            JobId = new Guid("d91a8535-c3e8-4509-bb52-6cb54b9900c7"),
                            Name = "Built Web APIs with NodeJS, ExpressJS, Postgres, and MongoDB."
                        },
                        new
                        {
                            Id = new Guid("27a6bc60-c2f6-427a-93db-ea519ab3a5e0"),
                            JobId = new Guid("d91a8535-c3e8-4509-bb52-6cb54b9900c7"),
                            Name = "Decouple codebase and built components make the code reusable."
                        },
                        new
                        {
                            Id = new Guid("48c28a1e-702c-4915-aca1-4a80a19fa34b"),
                            JobId = new Guid("d91a8535-c3e8-4509-bb52-6cb54b9900c7"),
                            Name = "Build a RESTful API that communicates with various external RESTful & SOAP APIs utilizing a Microservice approach."
                        },
                        new
                        {
                            Id = new Guid("45ba340c-c133-455d-ad4b-b5cc6f8f7546"),
                            JobId = new Guid("d91a8535-c3e8-4509-bb52-6cb54b9900c7"),
                            Name = "Deploy dockerized applications to Kubernetes via Helm charts."
                        },
                        new
                        {
                            Id = new Guid("54a4066a-0c68-46cc-8bed-edcedcf2b296"),
                            JobId = new Guid("5d83f458-2144-4ae3-8bd3-78e71dc4c960"),
                            Name = "Created JavaScript Modules from existing code using KnockoutJs, RequireJs, and ASP.NET."
                        },
                        new
                        {
                            Id = new Guid("7d66a422-2548-4535-8115-990748df5897"),
                            JobId = new Guid("5d83f458-2144-4ae3-8bd3-78e71dc4c960"),
                            Name = "Find, Document, and implement design patterns such as Dependency Injection and Repository Pattern."
                        },
                        new
                        {
                            Id = new Guid("404ae566-b128-4648-825f-b179dfd0ccd8"),
                            JobId = new Guid("5d83f458-2144-4ae3-8bd3-78e71dc4c960"),
                            Name = "Imported and improved legacy code from older applications into an ASP.NET MVC application."
                        },
                        new
                        {
                            Id = new Guid("12dcbfee-ec52-4793-a15e-4d7215ae9bcd"),
                            JobId = new Guid("5d83f458-2144-4ae3-8bd3-78e71dc4c960"),
                            Name = "Improved and modularized a highly customizable User Interface."
                        },
                        new
                        {
                            Id = new Guid("7b52caac-d36c-460d-980a-afba409a0f43"),
                            JobId = new Guid("089464e4-1a7c-4bdc-ae0c-09f4f6bdc4fa"),
                            Name = "Re-designed the company’s website and layouts utilizing Razor Engine, Bootstrap, LESS CSS, JQuery, and HTML."
                        },
                        new
                        {
                            Id = new Guid("6b53850e-d621-44d6-8dfe-696827ace71d"),
                            JobId = new Guid("089464e4-1a7c-4bdc-ae0c-09f4f6bdc4fa"),
                            Name = "Designed and Implemented the “partner” section on the company's website using C# ASP.NET, MVC, Entity Framework, LINQ, Razor Engine, and AngularJS."
                        },
                        new
                        {
                            Id = new Guid("6dc20a39-e1c8-4346-a2b8-73f074536ecc"),
                            JobId = new Guid("089464e4-1a7c-4bdc-ae0c-09f4f6bdc4fa"),
                            Name = "Implemented features where students can apply for a “partner’s” job through a website."
                        },
                        new
                        {
                            Id = new Guid("ed822a33-9ee3-4a62-9d45-b8deba3e0482"),
                            JobId = new Guid("089464e4-1a7c-4bdc-ae0c-09f4f6bdc4fa"),
                            Name = "Managed and led a team of 5-7 interns on daily assignments."
                        });
                });

            modelBuilder.Entity("Social", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Socials");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2922d46-95bf-4954-b1d0-e3083fbb1536"),
                            IsActive = true,
                            Name = "Github",
                            Url = "https://github.com/chrsolr/",
                            UserId = new Guid("7ca4b089-8feb-4017-857a-b0129948a0c8")
                        },
                        new
                        {
                            Id = new Guid("5cfa6a0e-1181-4808-b104-2b3e1c528176"),
                            IsActive = true,
                            Name = "LinkedIn",
                            Url = "https://www.linkedin.com/in/christiansoler/",
                            UserId = new Guid("7ca4b089-8feb-4017-857a-b0129948a0c8")
                        },
                        new
                        {
                            Id = new Guid("dd6eaf18-8672-49e0-b9b8-3cebf22dddb5"),
                            IsActive = true,
                            Name = "Codepen",
                            Url = "https://codepen.io/chrsolr",
                            UserId = new Guid("7ca4b089-8feb-4017-857a-b0129948a0c8")
                        },
                        new
                        {
                            Id = new Guid("3c479ecc-2183-4a33-908a-efa430605f4a"),
                            IsActive = true,
                            Name = "Instagram",
                            Url = "https://www.instagram.com/7w3n7y/",
                            UserId = new Guid("7ca4b089-8feb-4017-857a-b0129948a0c8")
                        },
                        new
                        {
                            Id = new Guid("d11346ef-fa29-4736-89b8-449405af3814"),
                            IsActive = false,
                            Name = "Twitch",
                            Url = "https://www.twitch.tv/7w3n7y",
                            UserId = new Guid("7ca4b089-8feb-4017-857a-b0129948a0c8")
                        },
                        new
                        {
                            Id = new Guid("7ea5712e-dd08-41a4-9949-d51b3e7ed5dd"),
                            IsActive = false,
                            Name = "YouTube",
                            Url = "https://www.youtube.com/@chrsolr",
                            UserId = new Guid("7ca4b089-8feb-4017-857a-b0129948a0c8")
                        });
                });

            modelBuilder.Entity("Technology", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Technologies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d2f1c84-739c-4e60-a4c1-6ca6662ebe4b"),
                            JobId = new Guid("d91a8535-c3e8-4509-bb52-6cb54b9900c7"),
                            Name = "AngularJs"
                        },
                        new
                        {
                            Id = new Guid("ca676155-33a4-44c7-91b9-07fdaa028a33"),
                            JobId = new Guid("d91a8535-c3e8-4509-bb52-6cb54b9900c7"),
                            Name = "ReactJs"
                        },
                        new
                        {
                            Id = new Guid("85dcf5c0-d9f8-48ee-90ee-bd6b7db50a02"),
                            JobId = new Guid("d91a8535-c3e8-4509-bb52-6cb54b9900c7"),
                            Name = "Styled Components"
                        },
                        new
                        {
                            Id = new Guid("54a70bb7-0489-492c-8da5-1cebcef9c113"),
                            JobId = new Guid("d91a8535-c3e8-4509-bb52-6cb54b9900c7"),
                            Name = "Typescript"
                        },
                        new
                        {
                            Id = new Guid("fcad6e47-4f86-46b6-b5a4-eb7b2df034ad"),
                            JobId = new Guid("d91a8535-c3e8-4509-bb52-6cb54b9900c7"),
                            Name = "NodeJs"
                        },
                        new
                        {
                            Id = new Guid("dd4ac557-78e6-4976-9b4e-568ea965154e"),
                            JobId = new Guid("d91a8535-c3e8-4509-bb52-6cb54b9900c7"),
                            Name = "MeteorJs"
                        },
                        new
                        {
                            Id = new Guid("6d8425ad-0463-4f5e-8d18-c7df202da24f"),
                            JobId = new Guid("d91a8535-c3e8-4509-bb52-6cb54b9900c7"),
                            Name = "MongoDB"
                        },
                        new
                        {
                            Id = new Guid("3f87bbb0-481c-4606-a20e-768247a4d3b8"),
                            JobId = new Guid("d91a8535-c3e8-4509-bb52-6cb54b9900c7"),
                            Name = "Docker"
                        },
                        new
                        {
                            Id = new Guid("58561326-2fbd-4609-9d5b-79e9e2427e7c"),
                            JobId = new Guid("d91a8535-c3e8-4509-bb52-6cb54b9900c7"),
                            Name = "Kubernetes"
                        },
                        new
                        {
                            Id = new Guid("a071687b-3f5f-410a-a76f-5175a1041a34"),
                            JobId = new Guid("5d83f458-2144-4ae3-8bd3-78e71dc4c960"),
                            Name = "C#"
                        },
                        new
                        {
                            Id = new Guid("8b890482-79b3-4db9-ba2e-dfd2c7b482e0"),
                            JobId = new Guid("5d83f458-2144-4ae3-8bd3-78e71dc4c960"),
                            Name = "ASP.NET MVC"
                        },
                        new
                        {
                            Id = new Guid("48f6a742-2d9e-4195-913b-3d4c6a05c4a1"),
                            JobId = new Guid("5d83f458-2144-4ae3-8bd3-78e71dc4c960"),
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = new Guid("d3554e88-90bc-4fef-91ac-5da9e7b367d4"),
                            JobId = new Guid("5d83f458-2144-4ae3-8bd3-78e71dc4c960"),
                            Name = "KnockoutJs"
                        },
                        new
                        {
                            Id = new Guid("ffdc8057-ee78-44db-b376-a92180ccf47f"),
                            JobId = new Guid("5d83f458-2144-4ae3-8bd3-78e71dc4c960"),
                            Name = "RequireJs"
                        },
                        new
                        {
                            Id = new Guid("7f05804d-26a2-4526-acd9-bcb681810822"),
                            JobId = new Guid("5d83f458-2144-4ae3-8bd3-78e71dc4c960"),
                            Name = "Entity Framework"
                        },
                        new
                        {
                            Id = new Guid("7649ccd2-558e-4511-a06d-f8fe1faad64c"),
                            JobId = new Guid("5d83f458-2144-4ae3-8bd3-78e71dc4c960"),
                            Name = "AJAX"
                        },
                        new
                        {
                            Id = new Guid("6707929f-8a2d-4bd7-8530-f68d9281fe9e"),
                            JobId = new Guid("5d83f458-2144-4ae3-8bd3-78e71dc4c960"),
                            Name = "MS SQL"
                        },
                        new
                        {
                            Id = new Guid("ae1f90d1-70bd-45fa-9fa4-3f02f7ccb488"),
                            JobId = new Guid("089464e4-1a7c-4bdc-ae0c-09f4f6bdc4fa"),
                            Name = "C#"
                        },
                        new
                        {
                            Id = new Guid("2203caf4-ad99-4957-9064-5fded8fe99da"),
                            JobId = new Guid("089464e4-1a7c-4bdc-ae0c-09f4f6bdc4fa"),
                            Name = "ASP.NET MVC"
                        },
                        new
                        {
                            Id = new Guid("63591471-0fb6-4b01-a7bb-cf010e5dde26"),
                            JobId = new Guid("089464e4-1a7c-4bdc-ae0c-09f4f6bdc4fa"),
                            Name = "AngularJs"
                        },
                        new
                        {
                            Id = new Guid("0c6e4d46-253f-43ea-bc0d-2e856aa741be"),
                            JobId = new Guid("089464e4-1a7c-4bdc-ae0c-09f4f6bdc4fa"),
                            Name = "MS SQL"
                        },
                        new
                        {
                            Id = new Guid("34f4b55f-ec13-4ead-a2c0-af353d427474"),
                            JobId = new Guid("089464e4-1a7c-4bdc-ae0c-09f4f6bdc4fa"),
                            Name = "AJAX"
                        },
                        new
                        {
                            Id = new Guid("555e9f26-4bcf-4b1c-ac57-1aee11d6a462"),
                            JobId = new Guid("089464e4-1a7c-4bdc-ae0c-09f4f6bdc4fa"),
                            Name = "LINQ"
                        });
                });

            modelBuilder.Entity("chrsolr_api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ca4b089-8feb-4017-857a-b0129948a0c8"),
                            CreatedAt = new DateTime(2023, 10, 17, 17, 40, 58, 881, DateTimeKind.Utc).AddTicks(5650),
                            Email = "chr.solr@gmail.com",
                            FirstName = "Christian",
                            ImageUrl = "https://i.imgur.com/9X6lkc5.jpg",
                            LastName = "Soler",
                            NickName = "Chrsolr",
                            Password = "",
                            UpdatedAt = new DateTime(2023, 10, 17, 17, 40, 58, 881, DateTimeKind.Utc).AddTicks(5650),
                            Username = "chrsolr"
                        });
                });

            modelBuilder.Entity("Education", b =>
                {
                    b.HasOne("chrsolr_api.Models.User", "User")
                        .WithMany("Educations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Job", b =>
                {
                    b.HasOne("chrsolr_api.Models.User", "User")
                        .WithMany("Jobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Responsibility", b =>
                {
                    b.HasOne("Job", "Job")
                        .WithMany("Responsibilities")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Social", b =>
                {
                    b.HasOne("chrsolr_api.Models.User", "User")
                        .WithMany("Socials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Technology", b =>
                {
                    b.HasOne("Job", "Job")
                        .WithMany("Technologies")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Job", b =>
                {
                    b.Navigation("Responsibilities");

                    b.Navigation("Technologies");
                });

            modelBuilder.Entity("chrsolr_api.Models.User", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Jobs");

                    b.Navigation("Socials");
                });
#pragma warning restore 612, 618
        }
    }
}
