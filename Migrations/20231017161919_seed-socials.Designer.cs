// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using chrsolr_api.Data;

#nullable disable

namespace chrsolr_api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231017161919_seed-socials")]
    partial class seedsocials
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Social", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Socials");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d239178-f00a-453d-a7c6-606e38085a7d"),
                            IsActive = true,
                            Name = "Github",
                            Url = "https://github.com/chrsolr/",
                            UserId = new Guid("7ca4b089-8feb-4017-857a-b0129948a0c8")
                        },
                        new
                        {
                            Id = new Guid("fb7956f9-49bc-4750-ad4f-f795928dcc83"),
                            IsActive = true,
                            Name = "LinkedIn",
                            Url = "https://www.linkedin.com/in/christiansoler/",
                            UserId = new Guid("7ca4b089-8feb-4017-857a-b0129948a0c8")
                        },
                        new
                        {
                            Id = new Guid("1750a6d6-3872-40ad-8289-1532d470cc23"),
                            IsActive = true,
                            Name = "Codepen",
                            Url = "https://codepen.io/chrsolr",
                            UserId = new Guid("7ca4b089-8feb-4017-857a-b0129948a0c8")
                        },
                        new
                        {
                            Id = new Guid("0fd4e3c8-cdd8-4460-a52a-5e7863ec4e54"),
                            IsActive = true,
                            Name = "Instagram",
                            Url = "https://www.instagram.com/7w3n7y/",
                            UserId = new Guid("7ca4b089-8feb-4017-857a-b0129948a0c8")
                        },
                        new
                        {
                            Id = new Guid("a3859ed1-4b36-4786-a89f-8d98bdc7b283"),
                            IsActive = false,
                            Name = "Twitch",
                            Url = "https://www.twitch.tv/7w3n7y",
                            UserId = new Guid("7ca4b089-8feb-4017-857a-b0129948a0c8")
                        },
                        new
                        {
                            Id = new Guid("2285852b-ff92-425e-9638-ef9e3de9b001"),
                            IsActive = false,
                            Name = "YouTube",
                            Url = "https://www.youtube.com/@chrsolr",
                            UserId = new Guid("7ca4b089-8feb-4017-857a-b0129948a0c8")
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ca4b089-8feb-4017-857a-b0129948a0c8"),
                            CreatedAt = new DateTime(2023, 10, 17, 16, 19, 19, 551, DateTimeKind.Utc).AddTicks(9470),
                            Email = "chr.solr@gmail.com",
                            FirstName = "Christian",
                            ImageUrl = "https://i.imgur.com/9X6lkc5.jpg",
                            LastName = "Soler",
                            NickName = "Chrsolr",
                            Password = "",
                            UpdatedAt = new DateTime(2023, 10, 17, 16, 19, 19, 551, DateTimeKind.Utc).AddTicks(9470),
                            Username = "chrsolr"
                        });
                });

            modelBuilder.Entity("Social", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("Socials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Socials");
                });
#pragma warning restore 612, 618
        }
    }
}
