// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using chrsolr_api.Data;

#nullable disable

namespace chrsolr_api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231013000741_seed-jobs")]
    partial class seedjobs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Markdown")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AboutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AboutId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88e748c8-b00d-4f5f-911f-99a8806a4ad7"),
                            AboutId = new Guid("a600cde4-e640-4904-9dca-23f09bcd8087"),
                            Description = "9 Week .NET Full Stack Program, 8/2014",
                            Location = "Coder Camps, Pearland, TX",
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("610df9e8-84bf-46ae-8bd7-90ac21779548"),
                            AboutId = new Guid("a600cde4-e640-4904-9dca-23f09bcd8087"),
                            Description = "Bachelor's Degree in Computer Science, (78 Credits)",
                            Location = "Rhode Island College, Providence, RI",
                            Order = 2
                        },
                        new
                        {
                            Id = new Guid("cbf7c311-cd4f-4171-899d-3251917dc769"),
                            AboutId = new Guid("a600cde4-e640-4904-9dca-23f09bcd8087"),
                            Description = "Associate Degree in Applied Science in Information Technology, 08/2011",
                            Location = "Monroe College, Bronx, NY",
                            Order = 3
                        });
                });

            modelBuilder.Entity("Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AboutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AboutId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1058390b-b5d4-4356-9ff3-03cb085fad4c"),
                            AboutId = new Guid("a600cde4-e640-4904-9dca-23f09bcd8087"),
                            CompanyName = "Innowatts Inc",
                            EndDate = "Present",
                            StartDate = "February 2018",
                            Title = "Full Stack Developer"
                        },
                        new
                        {
                            Id = new Guid("798d422f-0124-41fb-b1aa-a57b14570887"),
                            AboutId = new Guid("a600cde4-e640-4904-9dca-23f09bcd8087"),
                            CompanyName = "Preventice Solutions",
                            EndDate = "June 2017",
                            StartDate = "August 2015",
                            Title = "Jr. Software Engineer"
                        },
                        new
                        {
                            Id = new Guid("ce71783f-fce5-47ee-af3b-97c16eed808e"),
                            AboutId = new Guid("a600cde4-e640-4904-9dca-23f09bcd8087"),
                            CompanyName = "Coder Camps",
                            EndDate = "March 2015",
                            StartDate = "September 2014",
                            Title = "Jr. Web Developer/Teacher Assistants"
                        });
                });

            modelBuilder.Entity("Responsibility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Responsibilities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f498c717-fdf8-44ae-a202-426a768005bf"),
                            JobId = new Guid("1058390b-b5d4-4356-9ff3-03cb085fad4c"),
                            Name = "Built Web APIs with NodeJS, ExpressJS, Postgres, and MongoDB."
                        },
                        new
                        {
                            Id = new Guid("b663b583-da56-43cd-b724-ce705d966dcb"),
                            JobId = new Guid("1058390b-b5d4-4356-9ff3-03cb085fad4c"),
                            Name = "Decouple codebase and built components make the code reusable."
                        },
                        new
                        {
                            Id = new Guid("621d9cdd-2f6f-4565-8d70-af1d7fa57de3"),
                            JobId = new Guid("1058390b-b5d4-4356-9ff3-03cb085fad4c"),
                            Name = "Build a RESTful API that communicates with various external RESTful & SOAP APIs utilizing a Microservice approach."
                        },
                        new
                        {
                            Id = new Guid("134ee818-e8c0-486f-a8b5-746c590510f2"),
                            JobId = new Guid("1058390b-b5d4-4356-9ff3-03cb085fad4c"),
                            Name = "Deploy dockerized applications to Kubernetes via Helm charts."
                        },
                        new
                        {
                            Id = new Guid("548e5a5d-fad1-41bb-96d2-c258b54eaaef"),
                            JobId = new Guid("798d422f-0124-41fb-b1aa-a57b14570887"),
                            Name = "Created JavaScript Modules from existing code using KnockoutJs, RequireJs, and ASP.NET."
                        },
                        new
                        {
                            Id = new Guid("ba6d662e-eecf-4b9d-8270-93fe1a605e2d"),
                            JobId = new Guid("798d422f-0124-41fb-b1aa-a57b14570887"),
                            Name = "Find, Document, and implement design patterns such as Dependency Injection and Repository Pattern."
                        },
                        new
                        {
                            Id = new Guid("4c1335b8-3cd3-4086-abcf-32398d12243d"),
                            JobId = new Guid("798d422f-0124-41fb-b1aa-a57b14570887"),
                            Name = "Imported and improved legacy code from older applications into an ASP.NET MVC application."
                        },
                        new
                        {
                            Id = new Guid("7eab6faf-0ba2-4096-aa7d-7856c2e74d1f"),
                            JobId = new Guid("798d422f-0124-41fb-b1aa-a57b14570887"),
                            Name = "Improved and modularized a highly customizable User Interface."
                        },
                        new
                        {
                            Id = new Guid("195a2321-22be-4dbf-9b81-c096bb4c8b0b"),
                            JobId = new Guid("ce71783f-fce5-47ee-af3b-97c16eed808e"),
                            Name = "Re-designed the company’s website and layouts utilizing Razor Engine, Bootstrap, LESS CSS, JQuery, and HTML."
                        },
                        new
                        {
                            Id = new Guid("f35a3e77-d18c-421a-a72e-32b26ef922e0"),
                            JobId = new Guid("ce71783f-fce5-47ee-af3b-97c16eed808e"),
                            Name = "Designed and Implemented the “partner” section on the company's website using C# ASP.NET, MVC, Entity Framework, LINQ, Razor Engine, and AngularJS."
                        },
                        new
                        {
                            Id = new Guid("eb161960-71fb-4585-ad05-1488a75eda7b"),
                            JobId = new Guid("ce71783f-fce5-47ee-af3b-97c16eed808e"),
                            Name = "Implemented features where students can apply for a “partner’s” job through a website."
                        },
                        new
                        {
                            Id = new Guid("e1061345-799d-4993-8ce6-c57ec5bd5203"),
                            JobId = new Guid("ce71783f-fce5-47ee-af3b-97c16eed808e"),
                            Name = "Managed and led a team of 5-7 interns on daily assignments."
                        });
                });

            modelBuilder.Entity("Social", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AboutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AboutId");

                    b.ToTable("Socials");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4576873d-2df0-4448-8fa9-e42082eb248d"),
                            AboutId = new Guid("a600cde4-e640-4904-9dca-23f09bcd8087"),
                            IsActive = true,
                            Name = "Github",
                            Url = "https://github.com/chrsolr/"
                        },
                        new
                        {
                            Id = new Guid("652b60af-7656-45ca-b325-52f3f0088377"),
                            AboutId = new Guid("a600cde4-e640-4904-9dca-23f09bcd8087"),
                            IsActive = true,
                            Name = "LinkedIn",
                            Url = "https://www.linkedin.com/in/christiansoler/"
                        },
                        new
                        {
                            Id = new Guid("d6092f78-f49f-4c2a-b64f-67363de75e4c"),
                            AboutId = new Guid("a600cde4-e640-4904-9dca-23f09bcd8087"),
                            IsActive = true,
                            Name = "Codepen",
                            Url = "https://codepen.io/chrsolr"
                        },
                        new
                        {
                            Id = new Guid("da5f8acd-f662-4207-96ff-a351a93cdc64"),
                            AboutId = new Guid("a600cde4-e640-4904-9dca-23f09bcd8087"),
                            IsActive = true,
                            Name = "Instagram",
                            Url = "https://www.instagram.com/7w3n7y/"
                        },
                        new
                        {
                            Id = new Guid("cf3260e0-983c-4b4f-8fda-53906b578368"),
                            AboutId = new Guid("a600cde4-e640-4904-9dca-23f09bcd8087"),
                            IsActive = false,
                            Name = "Twitch",
                            Url = "https://www.twitch.tv/7w3n7y"
                        },
                        new
                        {
                            Id = new Guid("05ed22be-d769-492e-8b0b-54a86f04ace7"),
                            AboutId = new Guid("a600cde4-e640-4904-9dca-23f09bcd8087"),
                            IsActive = false,
                            Name = "YouTube",
                            Url = "https://www.youtube.com/@chrsolr"
                        });
                });

            modelBuilder.Entity("Technology", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Technologies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("057008b3-8968-404d-b464-48c81bfcf41f"),
                            JobId = new Guid("1058390b-b5d4-4356-9ff3-03cb085fad4c"),
                            Name = "AngularJs"
                        },
                        new
                        {
                            Id = new Guid("05036d2d-bc19-4d4e-89ea-fbdb781f60dc"),
                            JobId = new Guid("1058390b-b5d4-4356-9ff3-03cb085fad4c"),
                            Name = "ReactJs"
                        },
                        new
                        {
                            Id = new Guid("892f7cbe-836a-4080-a28f-80036082bdf4"),
                            JobId = new Guid("1058390b-b5d4-4356-9ff3-03cb085fad4c"),
                            Name = "style-components"
                        },
                        new
                        {
                            Id = new Guid("19e2ee81-662b-4718-942d-514a4e670c99"),
                            JobId = new Guid("1058390b-b5d4-4356-9ff3-03cb085fad4c"),
                            Name = "Typescript"
                        },
                        new
                        {
                            Id = new Guid("1d961c2f-f9b3-41a3-8507-756412f4db2e"),
                            JobId = new Guid("1058390b-b5d4-4356-9ff3-03cb085fad4c"),
                            Name = "NodeJs"
                        },
                        new
                        {
                            Id = new Guid("32a8bc19-5bf4-4fc1-8746-0af34cc484c7"),
                            JobId = new Guid("1058390b-b5d4-4356-9ff3-03cb085fad4c"),
                            Name = "MeteorJs"
                        },
                        new
                        {
                            Id = new Guid("830d5314-d4b7-4512-acaa-61ce596b77c8"),
                            JobId = new Guid("1058390b-b5d4-4356-9ff3-03cb085fad4c"),
                            Name = "MongoDB"
                        },
                        new
                        {
                            Id = new Guid("a4bb9293-e8c1-43f0-86d8-ecbf88f98cbc"),
                            JobId = new Guid("1058390b-b5d4-4356-9ff3-03cb085fad4c"),
                            Name = "Docker"
                        },
                        new
                        {
                            Id = new Guid("7b9994fe-348f-4f26-b7b3-cbdb24447a5d"),
                            JobId = new Guid("1058390b-b5d4-4356-9ff3-03cb085fad4c"),
                            Name = "Kubernetes"
                        },
                        new
                        {
                            Id = new Guid("105ef487-a370-4a98-a5d8-ea8cfaf2781b"),
                            JobId = new Guid("798d422f-0124-41fb-b1aa-a57b14570887"),
                            Name = "C#"
                        },
                        new
                        {
                            Id = new Guid("ffb1180d-ec04-4ded-b762-ad49f9c7d3d0"),
                            JobId = new Guid("798d422f-0124-41fb-b1aa-a57b14570887"),
                            Name = "ASP.NET MVC"
                        },
                        new
                        {
                            Id = new Guid("9ae7990f-9eea-40f1-b173-ca5be284adfa"),
                            JobId = new Guid("798d422f-0124-41fb-b1aa-a57b14570887"),
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = new Guid("0843c595-b5cc-4fec-9cb6-197acbb89a34"),
                            JobId = new Guid("798d422f-0124-41fb-b1aa-a57b14570887"),
                            Name = "KnockoutJs"
                        },
                        new
                        {
                            Id = new Guid("d2031b20-6539-4a91-bc2a-7b471b5e55f2"),
                            JobId = new Guid("798d422f-0124-41fb-b1aa-a57b14570887"),
                            Name = "RequireJs"
                        },
                        new
                        {
                            Id = new Guid("24c036f4-b203-4590-a8c0-183cda36e661"),
                            JobId = new Guid("798d422f-0124-41fb-b1aa-a57b14570887"),
                            Name = "Entity Framework"
                        },
                        new
                        {
                            Id = new Guid("79df4fb9-8aae-47f5-9d4c-fa4962de454b"),
                            JobId = new Guid("798d422f-0124-41fb-b1aa-a57b14570887"),
                            Name = "AJAX"
                        },
                        new
                        {
                            Id = new Guid("9d24f3a9-73e7-467b-a132-3b71bd7c5627"),
                            JobId = new Guid("798d422f-0124-41fb-b1aa-a57b14570887"),
                            Name = "MS SQL"
                        },
                        new
                        {
                            Id = new Guid("e25dec1e-bcee-4900-bd52-13da4acd420e"),
                            JobId = new Guid("ce71783f-fce5-47ee-af3b-97c16eed808e"),
                            Name = "C#"
                        },
                        new
                        {
                            Id = new Guid("b7177f4a-b6c8-403e-9faa-988a721cf6c9"),
                            JobId = new Guid("ce71783f-fce5-47ee-af3b-97c16eed808e"),
                            Name = "ASP.NET MVC"
                        },
                        new
                        {
                            Id = new Guid("d0f80fa5-fc88-4344-ace3-1c7ab1af2017"),
                            JobId = new Guid("ce71783f-fce5-47ee-af3b-97c16eed808e"),
                            Name = "AngularJs"
                        },
                        new
                        {
                            Id = new Guid("27593b20-6955-4d00-9ea4-aea0f1d77832"),
                            JobId = new Guid("ce71783f-fce5-47ee-af3b-97c16eed808e"),
                            Name = "MS SQL"
                        },
                        new
                        {
                            Id = new Guid("8114a7de-6f3a-4f78-bd81-3e580a91ca33"),
                            JobId = new Guid("ce71783f-fce5-47ee-af3b-97c16eed808e"),
                            Name = "AJAX"
                        },
                        new
                        {
                            Id = new Guid("ae231078-6d74-4071-ab91-b72ca705d2cc"),
                            JobId = new Guid("ce71783f-fce5-47ee-af3b-97c16eed808e"),
                            Name = "LINQ"
                        });
                });

            modelBuilder.Entity("chrsolr_api.Models.About", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("About");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a600cde4-e640-4904-9dca-23f09bcd8087"),
                            Email = "chr.solr@gmail.com",
                            FirstName = "Christian",
                            ImageUrl = "https://i.imgur.com/9X6lkc5.jpg",
                            LastName = "Soler",
                            NickName = "Chrsolr"
                        });
                });

            modelBuilder.Entity("Education", b =>
                {
                    b.HasOne("chrsolr_api.Models.About", "About")
                        .WithMany("Educations")
                        .HasForeignKey("AboutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("About");
                });

            modelBuilder.Entity("Job", b =>
                {
                    b.HasOne("chrsolr_api.Models.About", "About")
                        .WithMany("Jobs")
                        .HasForeignKey("AboutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("About");
                });

            modelBuilder.Entity("Responsibility", b =>
                {
                    b.HasOne("Job", "Job")
                        .WithMany("Responsibilities")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Social", b =>
                {
                    b.HasOne("chrsolr_api.Models.About", "About")
                        .WithMany("Socials")
                        .HasForeignKey("AboutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("About");
                });

            modelBuilder.Entity("Technology", b =>
                {
                    b.HasOne("Job", "Job")
                        .WithMany("Technologies")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Job", b =>
                {
                    b.Navigation("Responsibilities");

                    b.Navigation("Technologies");
                });

            modelBuilder.Entity("chrsolr_api.Models.About", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Jobs");

                    b.Navigation("Socials");
                });
#pragma warning restore 612, 618
        }
    }
}
