// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using chrsolr_api.Data;

#nullable disable

namespace chrsolr_api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231012232335_seed-educations")]
    partial class seededucations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Markdown")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AboutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AboutId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("62b5e7c2-bc88-49dc-b811-b362e38c51c9"),
                            AboutId = new Guid("c2ff80e3-d15b-45c9-a37c-f22dbf15a456"),
                            Description = "9 Week .NET Full Stack Program, 8/2014",
                            Location = "Coder Camps, Pearland, TX",
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("e5f68253-5aa0-4d68-8814-a32962d8da63"),
                            AboutId = new Guid("c2ff80e3-d15b-45c9-a37c-f22dbf15a456"),
                            Description = "Bachelor's Degree in Computer Science, (78 Credits)",
                            Location = "Rhode Island College, Providence, RI",
                            Order = 2
                        },
                        new
                        {
                            Id = new Guid("46e2a2d7-3d96-4b16-82de-0cca0c51f624"),
                            AboutId = new Guid("c2ff80e3-d15b-45c9-a37c-f22dbf15a456"),
                            Description = "Associate Degree in Applied Science in Information Technology, 08/2011",
                            Location = "Monroe College, Bronx, NY",
                            Order = 3
                        });
                });

            modelBuilder.Entity("Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AboutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AboutId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Responsibility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Responsibilities");
                });

            modelBuilder.Entity("Social", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AboutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AboutId");

                    b.ToTable("Socials");

                    b.HasData(
                        new
                        {
                            Id = new Guid("35c57cb8-819e-45c7-8b3b-f50116bc5219"),
                            AboutId = new Guid("c2ff80e3-d15b-45c9-a37c-f22dbf15a456"),
                            IsActive = true,
                            Name = "Github",
                            Url = "https://github.com/chrsolr/"
                        },
                        new
                        {
                            Id = new Guid("02add8d5-23d3-47dd-b09a-98821cdd638b"),
                            AboutId = new Guid("c2ff80e3-d15b-45c9-a37c-f22dbf15a456"),
                            IsActive = true,
                            Name = "LinkedIn",
                            Url = "https://www.linkedin.com/in/christiansoler/"
                        },
                        new
                        {
                            Id = new Guid("7d69deba-fff5-4a29-9693-332d6b89eb86"),
                            AboutId = new Guid("c2ff80e3-d15b-45c9-a37c-f22dbf15a456"),
                            IsActive = true,
                            Name = "Codepen",
                            Url = "https://codepen.io/chrsolr"
                        },
                        new
                        {
                            Id = new Guid("c828d676-8a23-4618-91ec-d7eb318698a1"),
                            AboutId = new Guid("c2ff80e3-d15b-45c9-a37c-f22dbf15a456"),
                            IsActive = true,
                            Name = "Instagram",
                            Url = "https://www.instagram.com/7w3n7y/"
                        },
                        new
                        {
                            Id = new Guid("0797752d-78d6-44ae-bb81-7947b1de9213"),
                            AboutId = new Guid("c2ff80e3-d15b-45c9-a37c-f22dbf15a456"),
                            IsActive = false,
                            Name = "Twitch",
                            Url = "https://www.twitch.tv/7w3n7y"
                        },
                        new
                        {
                            Id = new Guid("8e4d37f6-6a80-49ee-8117-747802945223"),
                            AboutId = new Guid("c2ff80e3-d15b-45c9-a37c-f22dbf15a456"),
                            IsActive = false,
                            Name = "YouTube",
                            Url = "https://www.youtube.com/@chrsolr"
                        });
                });

            modelBuilder.Entity("Technology", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Technologies");
                });

            modelBuilder.Entity("chrsolr_api.Models.About", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("About");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c2ff80e3-d15b-45c9-a37c-f22dbf15a456"),
                            Email = "chr.solr@gmail.com",
                            FirstName = "Christian",
                            ImageUrl = "https://i.imgur.com/9X6lkc5.jpg",
                            LastName = "Soler",
                            NickName = "Chrsolr"
                        });
                });

            modelBuilder.Entity("Education", b =>
                {
                    b.HasOne("chrsolr_api.Models.About", "About")
                        .WithMany("Educations")
                        .HasForeignKey("AboutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("About");
                });

            modelBuilder.Entity("Job", b =>
                {
                    b.HasOne("chrsolr_api.Models.About", null)
                        .WithMany("Jobs")
                        .HasForeignKey("AboutId");
                });

            modelBuilder.Entity("Responsibility", b =>
                {
                    b.HasOne("Job", null)
                        .WithMany("Responsibilities")
                        .HasForeignKey("JobId");
                });

            modelBuilder.Entity("Social", b =>
                {
                    b.HasOne("chrsolr_api.Models.About", "About")
                        .WithMany("Socials")
                        .HasForeignKey("AboutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("About");
                });

            modelBuilder.Entity("Technology", b =>
                {
                    b.HasOne("Job", null)
                        .WithMany("Technologies")
                        .HasForeignKey("JobId");
                });

            modelBuilder.Entity("Job", b =>
                {
                    b.Navigation("Responsibilities");

                    b.Navigation("Technologies");
                });

            modelBuilder.Entity("chrsolr_api.Models.About", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Jobs");

                    b.Navigation("Socials");
                });
#pragma warning restore 612, 618
        }
    }
}
